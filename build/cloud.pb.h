// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloud.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cloud_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cloud_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cloud_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cloud_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cloud_2eproto;
namespace cloud {
class CloudMessage;
class CloudMessageDefaultTypeInternal;
extern CloudMessageDefaultTypeInternal _CloudMessage_default_instance_;
class CloudMessage_KeyValuePair;
class CloudMessage_KeyValuePairDefaultTypeInternal;
extern CloudMessage_KeyValuePairDefaultTypeInternal _CloudMessage_KeyValuePair_default_instance_;
}  // namespace cloud
PROTOBUF_NAMESPACE_OPEN
template<> ::cloud::CloudMessage* Arena::CreateMaybeMessage<::cloud::CloudMessage>(Arena*);
template<> ::cloud::CloudMessage_KeyValuePair* Arena::CreateMaybeMessage<::cloud::CloudMessage_KeyValuePair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cloud {

enum CloudMessage_Type : int {
  CloudMessage_Type_REQUEST = 0,
  CloudMessage_Type_RESPONSE = 1,
  CloudMessage_Type_NOTIFICATION = 2,
  CloudMessage_Type_CloudMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CloudMessage_Type_CloudMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CloudMessage_Type_IsValid(int value);
constexpr CloudMessage_Type CloudMessage_Type_Type_MIN = CloudMessage_Type_REQUEST;
constexpr CloudMessage_Type CloudMessage_Type_Type_MAX = CloudMessage_Type_NOTIFICATION;
constexpr int CloudMessage_Type_Type_ARRAYSIZE = CloudMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloudMessage_Type_descriptor();
template<typename T>
inline const std::string& CloudMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CloudMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CloudMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CloudMessage_Type_descriptor(), enum_t_value);
}
inline bool CloudMessage_Type_Parse(
    const std::string& name, CloudMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CloudMessage_Type>(
    CloudMessage_Type_descriptor(), name, value);
}
enum CloudMessage_Operation : int {
  CloudMessage_Operation_PUT = 0,
  CloudMessage_Operation_GET = 1,
  CloudMessage_Operation_DELETE = 2,
  CloudMessage_Operation_CloudMessage_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CloudMessage_Operation_CloudMessage_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CloudMessage_Operation_IsValid(int value);
constexpr CloudMessage_Operation CloudMessage_Operation_Operation_MIN = CloudMessage_Operation_PUT;
constexpr CloudMessage_Operation CloudMessage_Operation_Operation_MAX = CloudMessage_Operation_DELETE;
constexpr int CloudMessage_Operation_Operation_ARRAYSIZE = CloudMessage_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloudMessage_Operation_descriptor();
template<typename T>
inline const std::string& CloudMessage_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CloudMessage_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CloudMessage_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CloudMessage_Operation_descriptor(), enum_t_value);
}
inline bool CloudMessage_Operation_Parse(
    const std::string& name, CloudMessage_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CloudMessage_Operation>(
    CloudMessage_Operation_descriptor(), name, value);
}
// ===================================================================

class CloudMessage_KeyValuePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloud.CloudMessage.KeyValuePair) */ {
 public:
  inline CloudMessage_KeyValuePair() : CloudMessage_KeyValuePair(nullptr) {};
  virtual ~CloudMessage_KeyValuePair();

  CloudMessage_KeyValuePair(const CloudMessage_KeyValuePair& from);
  CloudMessage_KeyValuePair(CloudMessage_KeyValuePair&& from) noexcept
    : CloudMessage_KeyValuePair() {
    *this = ::std::move(from);
  }

  inline CloudMessage_KeyValuePair& operator=(const CloudMessage_KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudMessage_KeyValuePair& operator=(CloudMessage_KeyValuePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloudMessage_KeyValuePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudMessage_KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const CloudMessage_KeyValuePair*>(
               &_CloudMessage_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CloudMessage_KeyValuePair& a, CloudMessage_KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudMessage_KeyValuePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudMessage_KeyValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloudMessage_KeyValuePair* New() const final {
    return CreateMaybeMessage<CloudMessage_KeyValuePair>(nullptr);
  }

  CloudMessage_KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloudMessage_KeyValuePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloudMessage_KeyValuePair& from);
  void MergeFrom(const CloudMessage_KeyValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudMessage_KeyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloud.CloudMessage.KeyValuePair";
  }
  protected:
  explicit CloudMessage_KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cloud_2eproto);
    return ::descriptor_table_cloud_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:cloud.CloudMessage.KeyValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloud_2eproto;
};
// -------------------------------------------------------------------

class CloudMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloud.CloudMessage) */ {
 public:
  inline CloudMessage() : CloudMessage(nullptr) {};
  virtual ~CloudMessage();

  CloudMessage(const CloudMessage& from);
  CloudMessage(CloudMessage&& from) noexcept
    : CloudMessage() {
    *this = ::std::move(from);
  }

  inline CloudMessage& operator=(const CloudMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudMessage& operator=(CloudMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloudMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudMessage* internal_default_instance() {
    return reinterpret_cast<const CloudMessage*>(
               &_CloudMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CloudMessage& a, CloudMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloudMessage* New() const final {
    return CreateMaybeMessage<CloudMessage>(nullptr);
  }

  CloudMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloudMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloudMessage& from);
  void MergeFrom(const CloudMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloud.CloudMessage";
  }
  protected:
  explicit CloudMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cloud_2eproto);
    return ::descriptor_table_cloud_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CloudMessage_KeyValuePair KeyValuePair;

  typedef CloudMessage_Type Type;
  static constexpr Type REQUEST =
    CloudMessage_Type_REQUEST;
  static constexpr Type RESPONSE =
    CloudMessage_Type_RESPONSE;
  static constexpr Type NOTIFICATION =
    CloudMessage_Type_NOTIFICATION;
  static inline bool Type_IsValid(int value) {
    return CloudMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    CloudMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    CloudMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    CloudMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return CloudMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return CloudMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return CloudMessage_Type_Parse(name, value);
  }

  typedef CloudMessage_Operation Operation;
  static constexpr Operation PUT =
    CloudMessage_Operation_PUT;
  static constexpr Operation GET =
    CloudMessage_Operation_GET;
  static constexpr Operation DELETE =
    CloudMessage_Operation_DELETE;
  static inline bool Operation_IsValid(int value) {
    return CloudMessage_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    CloudMessage_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    CloudMessage_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    CloudMessage_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return CloudMessage_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return CloudMessage_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(const std::string& name,
      Operation* value) {
    return CloudMessage_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKvpFieldNumber = 5,
    kMessageFieldNumber = 4,
    kTypeFieldNumber = 1,
    kOperationFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // repeated .cloud.CloudMessage.KeyValuePair kvp = 5;
  int kvp_size() const;
  private:
  int _internal_kvp_size() const;
  public:
  void clear_kvp();
  ::cloud::CloudMessage_KeyValuePair* mutable_kvp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloud::CloudMessage_KeyValuePair >*
      mutable_kvp();
  private:
  const ::cloud::CloudMessage_KeyValuePair& _internal_kvp(int index) const;
  ::cloud::CloudMessage_KeyValuePair* _internal_add_kvp();
  public:
  const ::cloud::CloudMessage_KeyValuePair& kvp(int index) const;
  ::cloud::CloudMessage_KeyValuePair* add_kvp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloud::CloudMessage_KeyValuePair >&
      kvp() const;

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .cloud.CloudMessage.Type type = 1;
  void clear_type();
  ::cloud::CloudMessage_Type type() const;
  void set_type(::cloud::CloudMessage_Type value);
  private:
  ::cloud::CloudMessage_Type _internal_type() const;
  void _internal_set_type(::cloud::CloudMessage_Type value);
  public:

  // .cloud.CloudMessage.Operation operation = 2;
  void clear_operation();
  ::cloud::CloudMessage_Operation operation() const;
  void set_operation(::cloud::CloudMessage_Operation value);
  private:
  ::cloud::CloudMessage_Operation _internal_operation() const;
  void _internal_set_operation(::cloud::CloudMessage_Operation value);
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cloud.CloudMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloud::CloudMessage_KeyValuePair > kvp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int type_;
  int operation_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloud_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CloudMessage_KeyValuePair

// string key = 1;
inline void CloudMessage_KeyValuePair::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CloudMessage_KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:cloud.CloudMessage.KeyValuePair.key)
  return _internal_key();
}
inline void CloudMessage_KeyValuePair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:cloud.CloudMessage.KeyValuePair.key)
}
inline std::string* CloudMessage_KeyValuePair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:cloud.CloudMessage.KeyValuePair.key)
  return _internal_mutable_key();
}
inline const std::string& CloudMessage_KeyValuePair::_internal_key() const {
  return key_.Get();
}
inline void CloudMessage_KeyValuePair::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CloudMessage_KeyValuePair::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cloud.CloudMessage.KeyValuePair.key)
}
inline void CloudMessage_KeyValuePair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cloud.CloudMessage.KeyValuePair.key)
}
inline void CloudMessage_KeyValuePair::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cloud.CloudMessage.KeyValuePair.key)
}
inline std::string* CloudMessage_KeyValuePair::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CloudMessage_KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:cloud.CloudMessage.KeyValuePair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudMessage_KeyValuePair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cloud.CloudMessage.KeyValuePair.key)
}
inline std::string* CloudMessage_KeyValuePair::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cloud.CloudMessage.KeyValuePair.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CloudMessage_KeyValuePair::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cloud.CloudMessage.KeyValuePair.key)
}

// string value = 2;
inline void CloudMessage_KeyValuePair::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CloudMessage_KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:cloud.CloudMessage.KeyValuePair.value)
  return _internal_value();
}
inline void CloudMessage_KeyValuePair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cloud.CloudMessage.KeyValuePair.value)
}
inline std::string* CloudMessage_KeyValuePair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:cloud.CloudMessage.KeyValuePair.value)
  return _internal_mutable_value();
}
inline const std::string& CloudMessage_KeyValuePair::_internal_value() const {
  return value_.Get();
}
inline void CloudMessage_KeyValuePair::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CloudMessage_KeyValuePair::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cloud.CloudMessage.KeyValuePair.value)
}
inline void CloudMessage_KeyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cloud.CloudMessage.KeyValuePair.value)
}
inline void CloudMessage_KeyValuePair::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cloud.CloudMessage.KeyValuePair.value)
}
inline std::string* CloudMessage_KeyValuePair::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CloudMessage_KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:cloud.CloudMessage.KeyValuePair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudMessage_KeyValuePair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cloud.CloudMessage.KeyValuePair.value)
}
inline std::string* CloudMessage_KeyValuePair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cloud.CloudMessage.KeyValuePair.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CloudMessage_KeyValuePair::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cloud.CloudMessage.KeyValuePair.value)
}

// -------------------------------------------------------------------

// CloudMessage

// .cloud.CloudMessage.Type type = 1;
inline void CloudMessage::clear_type() {
  type_ = 0;
}
inline ::cloud::CloudMessage_Type CloudMessage::_internal_type() const {
  return static_cast< ::cloud::CloudMessage_Type >(type_);
}
inline ::cloud::CloudMessage_Type CloudMessage::type() const {
  // @@protoc_insertion_point(field_get:cloud.CloudMessage.type)
  return _internal_type();
}
inline void CloudMessage::_internal_set_type(::cloud::CloudMessage_Type value) {
  
  type_ = value;
}
inline void CloudMessage::set_type(::cloud::CloudMessage_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cloud.CloudMessage.type)
}

// .cloud.CloudMessage.Operation operation = 2;
inline void CloudMessage::clear_operation() {
  operation_ = 0;
}
inline ::cloud::CloudMessage_Operation CloudMessage::_internal_operation() const {
  return static_cast< ::cloud::CloudMessage_Operation >(operation_);
}
inline ::cloud::CloudMessage_Operation CloudMessage::operation() const {
  // @@protoc_insertion_point(field_get:cloud.CloudMessage.operation)
  return _internal_operation();
}
inline void CloudMessage::_internal_set_operation(::cloud::CloudMessage_Operation value) {
  
  operation_ = value;
}
inline void CloudMessage::set_operation(::cloud::CloudMessage_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:cloud.CloudMessage.operation)
}

// bool success = 3;
inline void CloudMessage::clear_success() {
  success_ = false;
}
inline bool CloudMessage::_internal_success() const {
  return success_;
}
inline bool CloudMessage::success() const {
  // @@protoc_insertion_point(field_get:cloud.CloudMessage.success)
  return _internal_success();
}
inline void CloudMessage::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CloudMessage::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:cloud.CloudMessage.success)
}

// string message = 4;
inline void CloudMessage::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CloudMessage::message() const {
  // @@protoc_insertion_point(field_get:cloud.CloudMessage.message)
  return _internal_message();
}
inline void CloudMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:cloud.CloudMessage.message)
}
inline std::string* CloudMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:cloud.CloudMessage.message)
  return _internal_mutable_message();
}
inline const std::string& CloudMessage::_internal_message() const {
  return message_.Get();
}
inline void CloudMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CloudMessage::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cloud.CloudMessage.message)
}
inline void CloudMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cloud.CloudMessage.message)
}
inline void CloudMessage::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cloud.CloudMessage.message)
}
inline std::string* CloudMessage::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CloudMessage::release_message() {
  // @@protoc_insertion_point(field_release:cloud.CloudMessage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cloud.CloudMessage.message)
}
inline std::string* CloudMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cloud.CloudMessage.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CloudMessage::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cloud.CloudMessage.message)
}

// repeated .cloud.CloudMessage.KeyValuePair kvp = 5;
inline int CloudMessage::_internal_kvp_size() const {
  return kvp_.size();
}
inline int CloudMessage::kvp_size() const {
  return _internal_kvp_size();
}
inline void CloudMessage::clear_kvp() {
  kvp_.Clear();
}
inline ::cloud::CloudMessage_KeyValuePair* CloudMessage::mutable_kvp(int index) {
  // @@protoc_insertion_point(field_mutable:cloud.CloudMessage.kvp)
  return kvp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloud::CloudMessage_KeyValuePair >*
CloudMessage::mutable_kvp() {
  // @@protoc_insertion_point(field_mutable_list:cloud.CloudMessage.kvp)
  return &kvp_;
}
inline const ::cloud::CloudMessage_KeyValuePair& CloudMessage::_internal_kvp(int index) const {
  return kvp_.Get(index);
}
inline const ::cloud::CloudMessage_KeyValuePair& CloudMessage::kvp(int index) const {
  // @@protoc_insertion_point(field_get:cloud.CloudMessage.kvp)
  return _internal_kvp(index);
}
inline ::cloud::CloudMessage_KeyValuePair* CloudMessage::_internal_add_kvp() {
  return kvp_.Add();
}
inline ::cloud::CloudMessage_KeyValuePair* CloudMessage::add_kvp() {
  // @@protoc_insertion_point(field_add:cloud.CloudMessage.kvp)
  return _internal_add_kvp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloud::CloudMessage_KeyValuePair >&
CloudMessage::kvp() const {
  // @@protoc_insertion_point(field_list:cloud.CloudMessage.kvp)
  return kvp_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cloud

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cloud::CloudMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cloud::CloudMessage_Type>() {
  return ::cloud::CloudMessage_Type_descriptor();
}
template <> struct is_proto_enum< ::cloud::CloudMessage_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cloud::CloudMessage_Operation>() {
  return ::cloud::CloudMessage_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cloud_2eproto
